@page "/chat/private"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject NavigationManager navigation
@inject HttpClient httpClient
@implements IAsyncDisposable

<PageTitle>聊天</PageTitle>

<Flex Justify="center" Style="height:calc(100vh - 4.6rem); width:100%; overflow: hidden;">
    <Flex Vertical Align="flex-start" Style="width:55%; height:100%; overflow: hidden;">
        <div style="width:100%; height:85%; overflow:auto">
            @foreach (var message in messages)
            {
                <Flex Justify="@message.Item1" Style="width:100%">
                    <div style="max-width:75%; margin:5px; white-space:pre-line; background-color: aliceblue; border-radius:10px; padding:7px">
                        @if(message.Item2=="#loading") 
                        {
                            <Spin Tip="Loading..."/>
                        } 
                        else
                        {
                            @message.Item2
                        }
                    </div>
                </Flex>
            }
        </div>
        <div style="width:100%; height:15%; overflow:hidden; padding:7px"> 
            <Search Placeholder="input" EnterButton="@("Enter")" @bind-Value="@messageInput" AllowClear OnSearch="Send" Width="100%"/>
        </div>
    </Flex>
</Flex>

@code {
    private HubConnection? hubConnection;
    private List<(string, string)> messages = [];
    private string? messageInput;
    private string model = "claude-3-5-sonnet-20241022";
    private bool loading;

    public class IncludeRequestCredentialsMessageHandler : DelegatingHandler
    {
        protected override Task<HttpResponseMessage> SendAsync(
            HttpRequestMessage request, CancellationToken cancellationToken)
        {
            request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);
            return base.SendAsync(request, cancellationToken);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{httpClient.BaseAddress}signalr/chathub/private", opt =>
            {
                opt.HttpMessageHandlerFactory = innerHandler => 
                    new IncludeRequestCredentialsMessageHandler { InnerHandler = innerHandler };
            })
            .Build();

        hubConnection.On<string>("ReplyFromBot", msg =>
        {
            messages[messages.Count-1] = ("flex-end", msg);
            loading = false;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection?.State == HubConnectionState.Connected && !string.IsNullOrEmpty(messageInput) && !loading)
        {
            loading = true;
            messages.Add(("flex-start", messageInput));
            messages.Add(("flex-end", "#loading"));
            await InvokeAsync(StateHasChanged);
            await hubConnection.SendAsync("ChatToBot", model, messageInput);
            messageInput = "";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
