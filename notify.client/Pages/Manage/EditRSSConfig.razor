@page "/rss/config-edit/{ConfigId:long}"
@page "/rss/config-edit"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IMessageService messageService
@inject BlazorHttpHelper httpHelper

<PageTitle>RSS订阅配置编辑</PageTitle>

<PageHeader Class="site-page-header" Title="RSS订阅配置编辑" />

<Form Model="@config" LabelColSpan="8" WrapperColSpan="16" OnFinish="@submit">
    <FormItem Label="订阅渠道">
        <SimpleSelect DefaultValue="@config.SubscribeChannel" OnSelectedItemChanged="channelSelected">
            <SelectOptions>
                <SimpleSelectOption Value="@Consts.BilibiliLiveChannel" Label="B站直播"></SimpleSelectOption>
                <SimpleSelectOption Value="@Consts.BilibiliDynamicChannel" Label="B站动态"></SimpleSelectOption>
                <SimpleSelectOption Value="@Consts.YoutubeLiveChannel" Label="Youtube直播"></SimpleSelectOption>
                <SimpleSelectOption Value="@Consts.CopymangaUpdateChannel" Label="拷贝漫画更新"></SimpleSelectOption>
            </SelectOptions>
        </SimpleSelect>
    </FormItem>
    <FormItem Label="订阅Id">
        <Input @bind-Value="config.SubscribeId" />
    </FormItem>
    <FormItem Label="消息发送对象">
        <Input @bind-Value="config.MsgTargetId" />
    </FormItem>
    <FormItem Label="消息类型">
        <RadioGroup @bind-Value="config.MsgTargetType">
            <Radio Value="@Consts.MsgTargetTypeGroup">群聊</Radio>
            <Radio Value="@Consts.MsgTargetTypePrivate">私聊</Radio>
        </RadioGroup>
    </FormItem>
    <FormItem Label="校验时间间隔">
        <Input @bind-Value="config.CheckInterval" />
    </FormItem>
    <FormItem Label="备注">
        <Input @bind-Value="config.Comment" />
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            提交
        </Button>
    </FormItem>
</Form>

@code {
    [Parameter]
    public long? ConfigId { get; set; }
    
    private RSSConfigDO config = new RSSConfigDO
        {
            SubscribeChannel = Consts.BilibiliLiveChannel,
            SubscribeId = "",
            MsgTargetId = "",
            MsgTargetType = "",
            IsActive = true,
            CheckInterval = 600,
            Creator = "",
            Comment = "",
        };

    protected override async Task OnInitializedAsync()
    {
        if (ConfigId != null)
        {
            var response = await httpClient.GetAsync($"/api/manage/get-rss-config/{ConfigId}");
            await httpHelper.HandleResponse<RSSConfigDO>(response, "配置加载失败", cfg => config = cfg);
        }
    }

    private void channelSelected(string value)
    {
        config.SubscribeChannel = value;
    }

    private async Task submit(EditContext editContext)
    {
        var req = new SaveConfigsRequest<RSSConfigDO>
        {
            Configs = new List<RSSConfigDO> { config }
        };
        var response = await httpClient.PostAsJsonAsync($"/api/manage/save-rss-config", req);
        await httpHelper.HandleResponse(response, "保存失败", "", () => {
            navigationManager.NavigateTo("/rss/config-show", false);
            return Task.CompletedTask;
        });
    }
}
